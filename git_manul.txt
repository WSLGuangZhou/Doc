1.创建仓库
$ cd 到想创建仓库的目录
$ git init
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

2.新建文件及提交
在目录里面创建文件,使用notepad++编辑，编码采用UTF-8 without BOM
$ git add filename
$ git commit -m "log xxxx "

3.修改及提交
修改文件
$ git status  可查看是否有修改
$ git diff	  可查看变化 
提交修改的文件
$ git add filename
$ git commit -m "log xxxx "
$ git status 

4.版本回退
$ git log 查看版本，也可使用GUI来查看
$ git log --pretty=oneline 可查看各版本的hash值，利用该值可回退或前进到任意版本（输入前几个字符即可）
回退版本HEAD^代表上一个版本，HEAD^^代表上上个版本
$ git reset --hard HEAD^   
按版本hash值回退 
$ git reset --hard 1094a
可使用git reflog找回以前被干掉的版本hash值，再使用git reset --hard恢复
$ git reflog
让这个文件回到最近一次git commit或git add时的状态。
$ git checkout -- filename
让这个文件回到最近一次git commit时的状态。
git reset HEAD filename

5.删除文件
从版本库中删除该文件，那就用命令git rm删掉，并且git commit
$ git rm filename
$ git commit -m "log xxxxx"
没commit之前都可以用checkout恢复到最近提交的版本

6.Github
创建SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"
在github账号上添加公钥，公钥的位置在命令执行的结果里面
GitHub允许你添加多个Key。假定你有若干电脑，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
将本地的仓库与远程绑定
$ git remote add origin git@github.com:WSLGuangZhou/work.git
下一步，就可以把本地库的所有内容推送到远程库上
$ git push -u origin master
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告
输入yes回车即可

从现在起，只要本地作了提交，就可以通过命令
$ git push origin master
如果要推送其他分支，比如dev，就改成：
$ git push origin dev
clone远程分支
$ git checkout -b dev origin/dev
有冲突可以先下载下来，下载前要建好本地与远程分支的链接
$ git branch --set-upstream-to=origin/dev dev
$ git pull

远程clone一个仓库
$ git clone git@github.com:michaelliao/gitskills.git
查看远程仓库信息
$ git remote -v

7.分支
创建一个分支，并转到新分支
$ git checkout -b dev
相当于
$ git branch dev
$ git checkout dev
可查看当前分支
$ git branch
后续的add 和 commit都提交在当前分支上
合并分支
首先切回master（合并目的地的分支）
$ git checkout master
合并分支
$ git merge dev
删除已经合并的分支
$ git branch -d dev
合并可能会出现冲突的情况，需要自己编辑解决然后再合并
用git log --graph命令可以看到分支合并图
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。
$ git merge --no-ff -m "merge with no-ff" dev
合并后就可以删除分支
$ git branch -d dev
没合并需要强制删除-D
$ git branch -D dev

整理分支
$ git rebase
•rebase操作可以把本地未push的分叉提交历史整理成直线；
•rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

8.标签
在当前版本下打标签，默认标签是打在最新提交的commit上的
$ git tag v1.0
对历史commit打标签需要先查找hash号
$ git tag v0.9 f52c633
查看标签
$ git tag
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
$ git tag -a v0.1 -m "version 0.1 released" 1094adb
可以用git show <tagname>查看标签信息
$ git show <tagname>
删除
$ git tag -d v0.1
推送某个标签到远程，使用命令
$ git push origin <tagname>
一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags
要删除远程标签就麻烦一点，先从本地删除：
$ git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9







